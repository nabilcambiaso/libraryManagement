#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace libraryManagement
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LIBRARYDB")]
	public partial class cnxDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLOGIN(LOGIN instance);
    partial void UpdateLOGIN(LOGIN instance);
    partial void DeleteLOGIN(LOGIN instance);
    partial void InsertPRODUCT(PRODUCT instance);
    partial void UpdatePRODUCT(PRODUCT instance);
    partial void DeletePRODUCT(PRODUCT instance);
    #endregion
		
		public cnxDataContext() : 
				base(global::libraryManagement.Properties.Settings.Default.LIBRARYDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public cnxDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public cnxDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public cnxDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public cnxDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LOGIN> LOGINs
		{
			get
			{
				return this.GetTable<LOGIN>();
			}
		}
		
		public System.Data.Linq.Table<PRODUCT> PRODUCTs
		{
			get
			{
				return this.GetTable<PRODUCT>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOGIN")]
	public partial class LOGIN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _USERNAME;
		
		private string _PASSWORDS;
		
		private System.Nullable<bool> _ADMINS;
		
		private string _images;
		
		private EntitySet<PRODUCT> _PRODUCTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUSERNAMEChanging(string value);
    partial void OnUSERNAMEChanged();
    partial void OnPASSWORDSChanging(string value);
    partial void OnPASSWORDSChanged();
    partial void OnADMINSChanging(System.Nullable<bool> value);
    partial void OnADMINSChanged();
    partial void OnimagesChanging(string value);
    partial void OnimagesChanged();
    #endregion
		
		public LOGIN()
		{
			this._PRODUCTs = new EntitySet<PRODUCT>(new Action<PRODUCT>(this.attach_PRODUCTs), new Action<PRODUCT>(this.detach_PRODUCTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USERNAME", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string USERNAME
		{
			get
			{
				return this._USERNAME;
			}
			set
			{
				if ((this._USERNAME != value))
				{
					this.OnUSERNAMEChanging(value);
					this.SendPropertyChanging();
					this._USERNAME = value;
					this.SendPropertyChanged("USERNAME");
					this.OnUSERNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PASSWORDS", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PASSWORDS
		{
			get
			{
				return this._PASSWORDS;
			}
			set
			{
				if ((this._PASSWORDS != value))
				{
					this.OnPASSWORDSChanging(value);
					this.SendPropertyChanging();
					this._PASSWORDS = value;
					this.SendPropertyChanged("PASSWORDS");
					this.OnPASSWORDSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADMINS", DbType="Bit")]
		public System.Nullable<bool> ADMINS
		{
			get
			{
				return this._ADMINS;
			}
			set
			{
				if ((this._ADMINS != value))
				{
					this.OnADMINSChanging(value);
					this.SendPropertyChanging();
					this._ADMINS = value;
					this.SendPropertyChanged("ADMINS");
					this.OnADMINSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_images", DbType="VarChar(250)")]
		public string images
		{
			get
			{
				return this._images;
			}
			set
			{
				if ((this._images != value))
				{
					this.OnimagesChanging(value);
					this.SendPropertyChanging();
					this._images = value;
					this.SendPropertyChanged("images");
					this.OnimagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOGIN_PRODUCT", Storage="_PRODUCTs", ThisKey="ID", OtherKey="IDADMINS")]
		public EntitySet<PRODUCT> PRODUCTs
		{
			get
			{
				return this._PRODUCTs;
			}
			set
			{
				this._PRODUCTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PRODUCTs(PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.LOGIN = this;
		}
		
		private void detach_PRODUCTs(PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.LOGIN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PRODUCTS")]
	public partial class PRODUCT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _REFERENCE;
		
		private string _NAME;
		
		private System.Nullable<double> _PRICE;
		
		private System.Nullable<int> _QUANTITY;
		
		private System.Nullable<int> _IDADMINS;
		
		private string _images;
		
		private System.DateTime _ADDDATE;
		
		private EntityRef<LOGIN> _LOGIN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnREFERENCEChanging(string value);
    partial void OnREFERENCEChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnPRICEChanging(System.Nullable<double> value);
    partial void OnPRICEChanged();
    partial void OnQUANTITYChanging(System.Nullable<int> value);
    partial void OnQUANTITYChanged();
    partial void OnIDADMINSChanging(System.Nullable<int> value);
    partial void OnIDADMINSChanged();
    partial void OnimagesChanging(string value);
    partial void OnimagesChanged();
    partial void OnADDDATEChanging(System.DateTime value);
    partial void OnADDDATEChanged();
    #endregion
		
		public PRODUCT()
		{
			this._LOGIN = default(EntityRef<LOGIN>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_REFERENCE", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string REFERENCE
		{
			get
			{
				return this._REFERENCE;
			}
			set
			{
				if ((this._REFERENCE != value))
				{
					this.OnREFERENCEChanging(value);
					this.SendPropertyChanging();
					this._REFERENCE = value;
					this.SendPropertyChanged("REFERENCE");
					this.OnREFERENCEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="VarChar(50)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRICE", DbType="Float")]
		public System.Nullable<double> PRICE
		{
			get
			{
				return this._PRICE;
			}
			set
			{
				if ((this._PRICE != value))
				{
					this.OnPRICEChanging(value);
					this.SendPropertyChanging();
					this._PRICE = value;
					this.SendPropertyChanged("PRICE");
					this.OnPRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QUANTITY", DbType="Int")]
		public System.Nullable<int> QUANTITY
		{
			get
			{
				return this._QUANTITY;
			}
			set
			{
				if ((this._QUANTITY != value))
				{
					this.OnQUANTITYChanging(value);
					this.SendPropertyChanging();
					this._QUANTITY = value;
					this.SendPropertyChanged("QUANTITY");
					this.OnQUANTITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDADMINS", DbType="Int")]
		public System.Nullable<int> IDADMINS
		{
			get
			{
				return this._IDADMINS;
			}
			set
			{
				if ((this._IDADMINS != value))
				{
					if (this._LOGIN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDADMINSChanging(value);
					this.SendPropertyChanging();
					this._IDADMINS = value;
					this.SendPropertyChanged("IDADMINS");
					this.OnIDADMINSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_images", DbType="VarChar(250)")]
		public string images
		{
			get
			{
				return this._images;
			}
			set
			{
				if ((this._images != value))
				{
					this.OnimagesChanging(value);
					this.SendPropertyChanging();
					this._images = value;
					this.SendPropertyChanged("images");
					this.OnimagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDDATE", DbType="DateTime NOT NULL")]
		public System.DateTime ADDDATE
		{
			get
			{
				return this._ADDDATE;
			}
			set
			{
				if ((this._ADDDATE != value))
				{
					this.OnADDDATEChanging(value);
					this.SendPropertyChanging();
					this._ADDDATE = value;
					this.SendPropertyChanged("ADDDATE");
					this.OnADDDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOGIN_PRODUCT", Storage="_LOGIN", ThisKey="IDADMINS", OtherKey="ID", IsForeignKey=true)]
		public LOGIN LOGIN
		{
			get
			{
				return this._LOGIN.Entity;
			}
			set
			{
				LOGIN previousValue = this._LOGIN.Entity;
				if (((previousValue != value) 
							|| (this._LOGIN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOGIN.Entity = null;
						previousValue.PRODUCTs.Remove(this);
					}
					this._LOGIN.Entity = value;
					if ((value != null))
					{
						value.PRODUCTs.Add(this);
						this._IDADMINS = value.ID;
					}
					else
					{
						this._IDADMINS = default(Nullable<int>);
					}
					this.SendPropertyChanged("LOGIN");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
